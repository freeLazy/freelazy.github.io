#+TITLE: 192

- 班主任: 朱良斌
- 课代表: 许焕圣

  
* 笔记
** 2024-04-16 10:54:48

#+begin_src csx -n
  Point yuanlaidepianyi;
  bool 鼠标按下去了吗 = false;

  private void Form1_MouseDown(object sender, MouseEventArgs e)
  {
      鼠标按下去了吗 = true;
      yuanlaidepianyi = e.Location;
      //MessageBox.Show($"{MousePosition}, {e.Location}, {Location}");
  }

  private void Form1_MouseUp(object sender, MouseEventArgs e)
  {
      鼠标按下去了吗 = false;
  }

  private void Form1_MouseMove(object sender, MouseEventArgs e)
  {
      // MousePosition 是什么东西
      // e.Location 是什么玩意
      // 他们跟 this.Location 是什么关系
      if (鼠标按下去了吗)
      {
          Location = new Point
              (
              MousePosition.X - yuanlaidepianyi.X,
              MousePosition.Y - yuanlaidepianyi.Y
              );
      }
  }
#+end_src

** 2024-04-10 09:15:42
:PROPERTIES:
:ID:       20240410T091613.104984
:END:

小测验，温度转换 + 猜数字。详情见课本 21 页。

** 2024-04-09 10:24:50
:PROPERTIES:
:ID:       20240409T102501.823430
:END:

小测验，不规则的闹钟。详情见课本 22 页。

** 2024-04-03 09:26:26

关于跳动的心，需要掌握:
- 如何通过 FormBorderStyle 设置无标题窗体
- 如何通过 BackgroundImage 和 TransparentKey 设置不规则窗体
- 如何通过 Timer 与 Location/Size 等的配合，实现奇妙的互动行为
- 如何为窗体、控件绑定事件

本节课:
- 练习“跳动的心”
- 完成第一章课后题

** 2024-04-02 10:54:48

Tips:
- 对字符串表达式进行数学运算:
  : DataTable.Compute

** 2024-03-27 08:28:29

- 练习上次的内容，搞会
- 按照课本第10页，完成登录项目的编写
- 小小的挑战：跳动的心

** 2024-03-26 10:36:40

组件、控件、Control，在 C# 中，实际就是一个类的实例。

代码示例:
#+begin_src csx -n
  Timer timer;
  public Form1()
  {
      InitializeComponent();

      //定时器
      timer = new Timer();
      timer.Interval = 20;
      timer.Tick += sdfksdjfksd;
      timer.Start();
  }

  private void sdfksdjfksd(object sender, EventArgs e)
  {
      var loc = button1.Location;
      button1.Location = new Point(
          loc.X + 5 > 300 ? 0 : loc.X + 5,
          loc.Y + 1 > 200 ? 0 : loc.Y + 1);
  }

  private void Form1_Load(object sender, EventArgs e)
  {
      // 可以手动添加组件
    
      var button1 = new Button();
      button1.Text = "谢谢，安静";
      button1.Location = new Point(200, 300);

      var label = new Label();
      label.Text = "安静，谢谢";

      this.Controls.Add(button1);
      this.Controls.Add(label);

  }

  private void button2_Click(object sender, EventArgs e)
  {
      // 可以控制定时器的开始与结束
      timer.Enabled = !timer.Enabled;
  }
#+end_src

** 2024-03-20 14:58:37

一个小挑战。

一个应用程序，外观是一颗红色的心:
- 没有标题栏、关闭按钮等传统的窗口样式
- 不在任务栏显示
- 随着时间不断跳动 （变大、变小）
- 双击，会弹出一个窗口，输入正确的密码，才会结束

** 2024-03-19 10:49:19

实际上，一个窗体就是一个 C# 的类型。对应三个文件：
1. Form1.cs
2. Form1.Designer.cs
3. Form1.resx

通过 partial 分部类的方式，将不同部分的代码分离开来。

窗体的基本属性:
- FormBorderStyle
- Size/StartPosition/WindowState

窗体的基本方法:
- Hide/Close/Dispose
- Show/ShowDialog/Activate

常用事件:
- 窗体的加载时机: Load, FormClosed/FormClosing
- 鼠标动作: MouseClick/Down/Up, MouseEnter/Leave/Hover/Move
- 键盘动作: KeyPress/Down/Up
- 通用的动作: Click/DoubleClick

通过编码直接绑定事件:
#+begin_src csx -n
  private void Form1_Load(object sender, EventArgs e)
  {
      // 事件方法 (注意，通过 += 操作符添加事件)
      this.Click += 我是事件方法; 

      // 通过表达式语法
      this.Click += (object sender, EventArgs e) =>
      {
          MessageBox.Show("击");
      };
  }

  private void 我是事件方法(object sender, EventArgs e)
  {
      MessageBox.Show("ji");
  }
#+end_src

事件属性的使用示例:
#+begin_src csx -n
  private void Form2_MouseClick(object sender, MouseEventArgs e)
  {
      if (e.Button == MouseButtons.Left)
      {
          MessageBox.Show("我的左键被点击了");
      }
      else if (e.Button == MouseButtons.Right)
      {
          MessageBox.Show("你点我干啥");
      }
  }

  private void Form2_KeyDown(object sender, KeyEventArgs e)
  {
      if (e.KeyCode == Keys.H && e.Control)
      {
          MessageBox.Show("帮帮我");
      }
  }
#+end_src

** 2024-03-13 08:31:23

上课了

控制台应用程序 (CLI)
- Console.XXX

GUI 程序 (Graphic User Interface):
- 有用户界面的程序
- Winform/WPF/MAUI.

创建 Windows 窗体项目之后:
- 中间是界面设计器
- 左边是工具箱
- 右上角是项目管理器
- 右下角是属性管理器

如果你的 VS 不是上述布局:
1. 通过菜单上的【视图】找回相应的功能
2. 通过菜单上的【窗口-重置窗口布局】的方式，恢复默认布局

基本步骤:
0. 拿出纸笔，设计程序界面
1. 创建项目
2. 拖拽控件
3. 修改属性
4. 完善交互逻辑

从工具箱每一个拖进来的东西，都叫做一个 *控件*:
- 实质上，一个控件就是一个 C# 类型 (class Button/Label...) 的实例
- 通过界面设计器，进行拖拽，实质上是 VS 帮助我们自动生成了一坨坨的代码
- 每一个控件都有一个 [Name] 的属性，这个是控件的唯一引用 ID。
  要养成一个好的习惯，就是将常用的控件，改一个合适的名字
- MessageBox.Show 对应的是控制台项目中的 Console.Write

{{{details(求取BMI，代码片段，仅供参考)}}}
#+begin_src csx -n
  private void button1_Click(object sender, EventArgs e)
  {
      double sg = double.Parse(sgBox.Text);
      double tz = double.Parse(tzBox.Text);
      double bmi = tz / sg / sg;

      string stzk = null;
      if (bmi < 18.5)
      {
          stzk = "过轻";
      }
      else if (bmi < 24)
      {
          stzk = "正常";
      }
      else if (bmi < 28)
      {
          stzk = "超重";
      }
      else
      {
          stzk = "肥胖";
      }

      string jg = $"您的BMI为{bmi}, 身体状况为[{stzk}]";
      //Console.WriteLine(jg);
      //MessageBox.Show(jg);
      jgLabel.Text = jg;
  }
#+end_src
{{{details(/)}}}

接下来:
- 练习 Winform 版的 BMI 计算器
- 对上述 BMI 计算器进行优化，增加用户体验 (重点是错误处理)
- 为上述 BMI 计算器，增加历史记录和历史显示功能
  : [2011.1.23 15:20:35]  身高: 1.55   体重: 66   BMI: 33   状况: 健康
  : [2012.3.13 12:20:35]  身高: 1.24   体重: 67   BMI: 32   状况: 肥胖
  : [2015.2.5  11:20:35]  身高: 1.65   体重: 68   BMI: 23   状况: 健康

** 2024-03-12 11:07:40

记住: *Console.ReadLine 方法，返回的是一个字符串类型!!!*
: string abc = Console.ReadLine();

字符串 (string) 和字符 (char) 是不一样的!!!

** 2024-01-16 (寒假作业)

C/S架构编程，做完第一章所有的上机题:
- 可选项，其他题也做
- 如果任务不饱和，可酌情做一下第二章

** 2024-01-16 (期末成绩)

# #+begin_src elisp :var tb=rs
#   (cl-loop with fn =
#            (lambda (line n)
#              (let ((f (nth n line))) (if (numberp f) (max 60 (- 101 f)) (if (> (length f) 0) 70 60))))
#            for line in tb
#            for f1 = (funcall fn line 2)
#            for f2 = (funcall fn line 3)
#            for f3 = (funcall fn line 4)
#            collect (list (nth 1 line) f1 f2 f3 (round (/ (+ f1 f2 f3) 3.0))) into rs
#            finally
#            (return
#             (cl-loop for i from 1
#                      for line in (cl-sort rs (lambda (x y) (> (nth 4 x) (nth 4 y))))
#                      collect (cons i line))))
# #+end_src

| 名次 | 名字   | Test1 | Test2 | Test3 | Final |
|-----+-------+-------+-------+-------+-------|
|   1 | 段文潇 |    99 |   100 |    99 |    99 |
|   2 | 李吉   |   100 |    89 |   100 |    96 |
|   3 | 许焕圣 |    94 |    95 |    97 |    95 |
|   4 | 高旻昱 |    96 |    97 |    93 |    95 |
|   5 | 古远东 |    83 |    93 |    96 |    91 |
|   6 | 肖义珥 |    91 |    90 |    92 |    91 |
|   7 | 何华为 |    93 |    94 |    87 |    91 |
|   8 | 刘广鸿 |    90 |    98 |    86 |    91 |
|   9 | 黄可彬 |    82 |    92 |    95 |    90 |
|  10 | 张甘霖 |    86 |    96 |    79 |    87 |
|  11 | 余海中 |    98 |    84 |    78 |    87 |
|  12 | 谭鑫   |    97 |    88 |    77 |    87 |
|  13 | 段京文 |    84 |    83 |    91 |    86 |
|  14 | 黄飞超 |    70 |    87 |    98 |    85 |
|  15 | 段文锋 |    88 |    99 |    67 |    85 |
|  16 | 刘虹佑 |    87 |    70 |    89 |    82 |
|  17 | 李泽俊 |    70 |    86 |    84 |    80 |
|  18 | 麦天河 |    95 |    70 |    75 |    80 |
|  19 | 韦金良 |    70 |    85 |    83 |    79 |
|  20 | 贝俊霖 |    70 |    70 |    94 |    78 |
|  21 | 陈颖聪 |    70 |    91 |    72 |    78 |
|  22 | 郭榕荣 |    70 |    70 |    90 |    77 |
|  23 | 梁泽文 |    70 |    70 |    88 |    76 |
|  24 | 李耀武 |    70 |    80 |    76 |    75 |
|  25 | 王海波 |    92 |    60 |    73 |    75 |
|  26 | 陈梓鑫 |    70 |    70 |    81 |    74 |
|  27 | 吴幸林 |    70 |    60 |    85 |    72 |
|  28 | 张桂毓 |    70 |    82 |    63 |    72 |
|  29 | 苏大明 |    70 |    60 |    82 |    71 |
|  30 | 唐景富 |    70 |    70 |    74 |    71 |
|  31 | 刘翔   |    89 |    60 |    65 |    71 |
|  32 | 刘泽泉 |    70 |    81 |    62 |    71 |
|  33 | 叶宇   |    70 |    60 |    80 |    70 |
|  34 | 谢晓中 |    70 |    70 |    71 |    70 |
|  35 | 陆宇轩 |    70 |    70 |    66 |    69 |
|  36 | 李岳元 |    85 |    60 |    61 |    69 |
|  37 | 周永久 |    70 |    70 |    64 |    68 |
|  38 | 饶展源 |    70 |    60 |    71 |    67 |
|  39 | 何晓东 |    70 |    70 |    60 |    67 |
|  40 | 沈艺宏 |    70 |    60 |    69 |    66 |
|  41 | 薛进超 |    70 |    60 |    68 |    66 |
|  42 | 卢德涛 |    70 |    70 |    60 |    66 |
|  43 | 岑法政 |    60 |    60 |    60 |    60 |

** 2023-12-26 (任务)
:PROPERTIES:
:ID:       20240311T095501.465594
:END:

使用 Winform 实现一个求取 BMI 的应用。要求设计合理，使用方便，美观大方

** 2023-10-31 (任务)
:PROPERTIES:
:ID:       20240311T095521.767719
:END:

创建类 PLC，描述设备的基本信息并添加基本控制

** 2023-09-06 (任务)
:PROPERTIES:
:ID:       20240311T095545.158503
:END:

1.hello.txt, 完成从创建文件、编译到运行的整个过程


* 任务结果

#+NAME: rs
| G | 姓名   | [[id:20240409T102501.823430][2024-04-09]] | [[id:20240410T091613.104984][2024-04-10]] |
|---+-------+------------+------------|
| 4 | 李吉   |          1 |          1 |
| 5 | 许焕圣 |          2 |          3 |
| 5 | 何华为 |          3 |            |
| 5 | 韦金良 |          4 |            |
| 5 | 肖义珥 |          5 |            |
| 2 | 高旻昱 |          6 |            |
| 3 | 刘广鸿 |          7 |            |
| 3 | 段文潇 |          8 |          2 |
| 4 | 贝俊霖 |          9 |            |
| 5 | 黄可彬 |         10 |            |
| 3 | 李泽俊 |         11 |            |
| 2 | 李耀武 |         12 |            |
| 5 | 黄飞超 |         13 |            |
| 5 | 古远东 |         14 |            |
| 3 | 唐景富 |         15 |            |
| 5 | 郭榕荣 |         16 |            |
| 3 | 陈颖聪 |         17 |            |
| 6 | 段京文 |         18 |            |
| 1 | 陆宇轩 |         19 |            |
| 2 | 刘虹佑 |         20 |            |
| 3 | 段文锋 |         21 |            |
| 2 | 岑法政 |         22 |            |
| 3 | 薛进超 |         23 |            |
| 1 | 谭鑫   |         24 |            |
| 1 | 余海中 |         25 |            |
| 5 | 梁泽文 |         26 |            |
| 1 | 吴幸林 |         27 |            |
| 3 | 张甘霖 |         28 |            |
| 1 | 苏大明 |            |            |
| 4 | 陈梓鑫 |            |            |
| 4 | 叶宇   |            |            |
| 2 | 麦天河 |            |            |
| 4 | 王海波 |            |            |
| 3 | 饶展源 |            |            |
| 1 | 沈艺宏 |            |            |
| 1 | 刘翔   |            |            |
| 6 | 周永久 |            |            |
| 6 | 张桂毓 |            |            |
| 6 | 刘泽泉 |            |            |
| 1 | 李岳元 |            |            |
| 4 | 何晓东 |            |            |
| 4 | 卢德涛 |            |            |


{{{details(history score)}}}

#+NAME: rs
| G | 姓名   | [[id:20240311T095545.158503][2023-09-06]] | [[id:20240311T095521.767719][2023-10-31]] | [[id:20240311T095501.465594][2023-12-26]] |
|---+-------+------------+------------+------------|
| 4 | 李吉   | 1          |         12 |          1 |
| 3 | 段文潇 | 2          |          1 |          2 |
| 5 | 黄飞超 | -          |         14 |          3 |
| 5 | 许焕圣 | 7          |          6 |          4 |
| 5 | 古远东 | 18         |          8 |          5 |
| 5 | 黄可彬 | 19         |          9 |          6 |
| 4 | 贝俊霖 | -          |          - |          7 |
| 2 | 高旻昱 | 5          |          4 |          8 |
| 5 | 肖义珥 | 10         |         11 |          9 |
| 6 | 段京文 | 17         |         18 |         10 |
| 5 | 郭榕荣 | -          |          - |         11 |
| 2 | 刘虹佑 | 14         |          - |         12 |
| 5 | 梁泽文 | -          |          - |         13 |
| 5 | 何华为 | 8          |          7 |         14 |
| 3 | 刘广鸿 | 11         |          3 |         15 |
| 1 | 吴幸林 | -          |            |         16 |
| 3 | 李泽俊 | -          |         15 |         17 |
| 5 | 韦金良 | -          |         16 |         18 |
| 1 | 苏大明 | -          |            |         19 |
| 4 | 陈梓鑫 | -          |          - |         20 |
| 4 | 叶宇   | -          |            |         21 |
| 3 | 张甘霖 | 15         |          5 |         22 |
| 1 | 余海中 | 3          |         17 |         23 |
| 1 | 谭鑫   | 4          |         13 |         24 |
| 2 | 李耀武 | -          |         21 |         25 |
| 2 | 麦天河 | 6          |          - |         26 |
| 3 | 唐景富 | -          |          - |         27 |
| 4 | 王海波 | 9          |            |         28 |
| 3 | 陈颖聪 | -          |         10 |         29 |
| 3 | 饶展源 | -          |            |         30 |
| 4 | 谢晓中 | -          |          - |         30 |
| 1 | 沈艺宏 | -          |            |         32 |
| 3 | 薛进超 | -          |            |         33 |
| 3 | 段文锋 | 13         |          2 |         34 |
| 1 | 陆宇轩 | -          |          - |         35 |
| 1 | 刘翔   | 12         |            |         36 |
| 6 | 周永久 | -          |          - |         37 |
| 6 | 张桂毓 | -          |         19 |         38 |
| 6 | 刘泽泉 | -          |         20 |         39 |
| 1 | 李岳元 | 16         |            |         40 |
| 4 | 何晓东 | -          |          - |         41 |
| 4 | 卢德涛 | -          |          - |         42 |
| 2 | 岑法政 |            |            |            |

{{{details(/)}}}

* 练习题
** Winform练习题

1. 创建一个简单的登录窗体，包含用户名和密码的文本框，以及登录按钮。
   当用户点击登录按钮时，检查用户名和密码是否正确，并显示相应的提示信息。 
2. 创建一个计算器窗体，包含数字按钮和运算符按钮。当用户点击数字按钮时，在文本框中显示相应的数字。
   当用户点击运算符按钮时，根据当前显示的数字和运算符进行计算，并在文本框中显示结果。 
3. 创建一个列表窗体，用于显示学生的姓名和成绩。窗体中包含一个添加按钮和一个显示按钮。
   当用户点击添加按钮时，弹出一个对话框，要求输入学生的姓名和成绩，并将其添加到列表中。当用户点击显示按钮时，在另一个窗体中显示所有学生的姓名和成绩。
4. 创建一个简单的音乐播放器窗体，包含播放、暂停和停止按钮，以及显示当前播放状态的标签。
   当用户点击播放按钮时，播放音乐；点击暂停按钮时，暂停音乐；点击停止按钮时，停止音乐。
5. 创建一个简单的图片浏览器窗体，包含向前、向后按钮和显示当前图片的图片框。
   当用户点击向前按钮时，显示上一张图片；点击向后按钮时，显示下一张图片。
6. 创建一个简单的文本编辑器窗体，可以打开和保存文本文件。窗体包含一个文本框用于输入和编辑文本内容，以及打开和保存按钮。
   当用户点击打开按钮时，弹出一个对话框选择要打开的文本文件，并将其内容显示在文本框中。当用户点击保存按钮时，将文本框中的内容保存到指定的文件中。
7. 创建一个简单的倒计时器窗体，可以设置倒计时时间，并显示倒计时的剩余时间。
   窗体包含一个输入框用于设置倒计时时间，一个开始按钮和一个显示剩余时间的标签。
   当用户点击开始按钮时，开始倒计时，并在标签中显示剩余时间，直到倒计时结束。
8. 创建一个简单的日历窗体，显示当前日期和时间，并允许用户选择日期。
   窗体包含一个显示当前日期和时间的标签，以及一个选择日期的日历控件。
9. 创建一个简单的笔记本应用程序窗体，可以创建、打开和保存笔记。
   窗体包含一个文本框用于输入和编辑笔记内容，以及新建、打开和保存按钮。
   当用户点击新建按钮时，清空文本框内容；当用户点击打开按钮时，弹出一个对话框选择要打开的笔记文件，并将其内容显示在文本框中；
   当用户点击保存按钮时，将文本框中的内容保存到指定的文件中。
10. 创建一个简单的待办事项列表窗体，可以添加、删除和完成待办事项。
    窗体包含一个文本框用于输入待办事项，一个添加按钮和一个待办事项列表框。
    当用户点击添加按钮时，将输入的待办事项添加到列表框中；
    当用户选中列表框中的待办事项并点击删除按钮时，删除选中的待办事项；
    当用户选中列表框中的待办事项并点击完成按钮时，将选中的待办事项标记为已完成。

** 下面是一个求取 BMI 的控制台应用，请找出并修改所有 BUG

#+begin_src csharp
  using System;

  class Program
  {
      static void Main()
      {
          Console.Write("欢迎使用 BMI 计算器！");

          boolean run = false;
          while (run)
          {
              int height, weight;

              while (true)
                  Console.Write("请输入您的身高（米）：");
                  if (double.TryParse(Console.ReadLine(), out height) && height > 0)
                  {
                      break;
                  }
                  else
                  {
                      Console.WriteLine("输入的身高无效，请重新输入。");
                  }

              while (true)
              {
                  Console.Write("请输入您的体重（公斤）：");
                  if (double.Parse(Console.ReadLine(), out weight) && weight > 0)
                  {
                      continue;
                  }
                  else
                  {
                      Console.WriteLine("输入的体重无效，请重新输入。");
                  }
              }

              double bmi = height / (weight * weight);

              Console.Write(@"您的 BMI 值为：{bmi}");

              if (bmi < 18.5)
              {
                  Console.WriteLine("您的体重过轻！");
              }
              else if (bmi < 24)
              {
                  Console.WriteLine("您的体重正常。");
              }
              else if (bmi < 28)
              {
                  Console.WriteLine("您的体重超重。");
              }
              else
              {
                  Console.WriteLine("您的体重肥胖！");
              }

              Console.WriteLine();

              Console.Write("是否继续计算BMI？（是/否）：");
              char input = Console.ReadKey();

              if (input !== "是")
              {
                  run = false;
              }

              Console.WriteLine();
          }
      }
  }
#+end_src

{{{details(点击查看答案，仅供参考)}}}
#+begin_src csharp -n
  using System;

  class Program
  {
      static void Main()
      {
          Console.WriteLine("欢迎使用 BMI 计算器！");

          bool run = true;
          while (run)
          {
              // 定义变量
              double height, weight;

              // 读取身高
              while (true)
              {
                  Console.Write("请输入您的身高（米）：");
                  if (double.TryParse(Console.ReadLine(), out height) && height > 0)
                  {
                      break;
                  }
                  else
                  {
                      Console.WriteLine("输入的身高无效，请重新输入。");
                  }
              }

              // 读取体重
              while (true)
              {
                  Console.Write("请输入您的体重（公斤）：");
                  if (double.TryParse(Console.ReadLine(), out weight) && weight > 0)
                  {
                      break;
                  }
                  else
                  {
                      Console.WriteLine("输入的体重无效，请重新输入。");
                  }
              }

              // 计算并输出 BMI
              double bmi = weight / (height * height);
              Console.Write($"您的 BMI 值为：{bmi}\n");

              // 计算身体状况
              if (bmi < 18.5)
              {
                  Console.WriteLine("您的体重过轻！");
              }
              else if (bmi < 24)
              {
                  Console.WriteLine("您的体重正常。");
              }
              else if (bmi < 28)
              {
                  Console.WriteLine("您的体重超重。");
              }
              else
              {
                  Console.WriteLine("您的体重肥胖！");
              }

              Console.WriteLine();

              // 判定是不是继续下一次
              Console.Write("是否继续计算BMI？（是/否）：");
              string input = Console.ReadLine();

              if (input != "是")
              {
                  run = false;
              }

              Console.WriteLine();
          }
      }
  }

#+end_src
{{{details(/)}}}

* 知识点
** 将 string 转换为 double 有哪些方式?

在 C# 中，转换 string 为 double 的方式主要有三种:

1. 使用 *double.Parse* 方法，例如：

  #+begin_src csharp
    string numberString = "123.45";
    double number = double.Parse(numberString);
    Console.WriteLine(number);
  #+end_src
  
  如果字符串不能被解析为 double，此方法会抛出一个异常。

  {{{details(如果带异常处理的话，代码应该是这样的)}}}
  #+begin_src csharp
    // 使用异常处理机制 try/catch
    string numberString = "1g3.45";
    double number;
    try
    {
        number = double.Parse(numberString);
        Console.WriteLine(number);
    }
    catch
    {
        Console.WriteLine("您的输入有误");
    }
  #+end_src
  {{{details(/)}}}

2. 使用 *double.TryParse* 方法，例如：

  #+begin_src csharp
    string numberString = "123.45";
    double number;
    bool isParsed = double.TryParse(numberString, out number);
    Console.WriteLine(isParsed ? number : "失败了");
  #+end_src
  
  此方法会尝试将字符串解析为 double，如果不成功，此方法不会抛出异常，而是将输出变量设为 0，并且返回 false。

  这种方式不使用 try/catch 机制，代码看起来更简洁灵活。

3. 使用 *Convert.ToDouble* 方法，例如：

  #+begin_src csharp
    string numberString = "123.45";
    double number = Convert.ToDouble(numberString);
    Console.WriteLine(number);
  #+end_src
  
  事实上 =Convert.ToDouble= 方法在内部使用的也是 =double.Parse= ，因此如果转换失败，它将抛出一个异常。

