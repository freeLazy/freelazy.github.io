#+TITLE: HTML/CSS


* html
** html5 中的标签（语义化）

内置的一些标签:
- section，部分
- article，文章
- aside, 侧边
- header/footer

#+begin_src html
  <article>
    <header>
      <h3>我是一篇文章的标题</h3>
      <span>发表日期: xxxxx</span>
      <span>作者名字: xxxxx</span>
    </header>

    <div>
      <p>ksdjfksd</p>
    </div>

    <div>
      <p>ksdjfksd</p>
    </div>

    <footer>
      <p>索引信息...</p>
      <p>欢迎订阅...</p>
    </footer>
  </article>
#+end_src

** table 标签

虽然你可以简写为:
#+begin_src html
  <table>
    <tr>
      <th></th>
      <th></th>
      <th></th>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td></td>
    </tr>
  </table>
#+end_src

但是，它的全写格式却含有 thead/tbody:
#+begin_src html
  <table>
    <thead>
      <tr>
        <th></th>
        <th></th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td></td>
        <td></td>
        <td></td>
      </tr>
    </tbody>
  </table>
#+end_src

* CSS
** 网页布局 (Layout)
*** Display/Position (盒子模型/文档流)

每一个元素可以通过 display 设置其在盒子模型中的默认渲染行为:
- block
- inline

页面的布局基于文档流。通过设置 position 可以改变文档流的一些行为:
- static
- relative
- absolute
- fixed

*** Float, 浮动

一种将元素脱离正常的文档流，单独为其设置位置的方式。

#+begin_src css
  div { float: right; }
#+end_src

*** Flexbox, 弹性盒子

#+begin_src css
  .container
  {
      display: flex;
      justify-content: center;
  }
  .item
  {
      flex-flow: 1;
  }
#+end_src

*** Grid, 网格布局

#+begin_src css
  .container
  {
      display: grid;
      grid-template-columns: 1fr 2fr auto;
      grid-gap: 1em;
  }
  .itemX
  {
      grid-row: 1 / 5;
  }  
#+end_src
** Viewport

对于这样的 CSS 样式:
: body { width: 1024px }

以前的 PC 上是按照真实分辨率渲染的，自然没问题。

可是后来出现了移动设备，屏幕普遍小。只能通过缩放将页面展示到上，因此字体会特别小，难以看清。

如何解决这个问题？苹果当初引入了 Viewport 的概念 (虚拟的屏幕 ---> 实际的屏幕):
1. 创建一个虚拟的的区域 ~Layout Viewport~ 宽度近乎 PC，然后将网页中内容渲染到上面
2. 将上述 Viewport 中的内容，映射呈现到真实的屏幕上

于是我们就可以看到一个可以缩放、带滚动条的页面，甚至可以呈现跟 PC 一样的效果:
- 可以通过调整 Viewport 的各种参数，达到不同的渲染效果
- 如果将 width 设置为 device-width，PC 端几乎不受影响，绝大多数手机端的 viewport 将会有 320px 左右的宽度。
  那么如果一个按钮，设置其 width=80px，那么它渲染出的效果是占 1/4 个屏幕宽度的空间。
- 当然，不同设备的 device-width 是不一样的，比如 iPad 大约是 700px+。这种情况下，就需要借助 Media Type 为不同设备适配单独的 CSS 样式了

代码:  
#+begin_src html
  <meta name="viewport" content="width=2000px, initial-scale=1, user-scalable=no">
  <meta name="viewport" content="width=device-width">
#+end_src

** Media Query

为了在不同设备上渲染不同的样式，CSS 推出了 Media Query 的概念。

媒体查询，语法:
: @media not|only MediaType and (MediaFeatureExpressions) { CSS }

示例:
#+begin_src css
  div
  {
      color: red;
  }

  @media screen and (max-device-with: 960px)
  {
      div
      {
          color: green;
      }
  }

  @media (min-width: 2000px)
  {
      div
      {
          color: yellow;
      }
  }

  @media print {
      div
      {
          color: purple;
      }
  }
#+end_src

** CDN (Content Delivery Network)

* bootstrap.css

https://www.bootcss.com/

流行的、经典的、引领了一代潮流的、 +非前端开发人员+ 必须掌握的一个 CSS 框架。

预定义样式 + 预定义样式类:
- 提供了更好的默认样式
- 栅格系统、响应式布局
- 组件化
