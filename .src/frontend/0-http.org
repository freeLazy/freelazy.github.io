#+TITLE: HTTP

HTTP (超文本传输协议) 是一个简单的请求-响应协议，它通常运行在 TCP 之上。

* HTTP (Hyper Text Transfer Protocol)
** HTTP 是一种基于请求响应的文本协议

基本特点:
- 基于请求-响应 (Request - Response)
- 基于文本 (字符串)
- 无状态的

HTTP 是无状态的:
- 任何请求都是独立的，无法区分。服务器不记录状态
- 优点: 简单；高效；健壮；适用性广
- 但是，我们通常的业务请求，需要是有状态的
- 因此，需要基于这种无状态进行状态的维护:
  + Url 重写 (把所有需要保存的状态，都通过 url 的方式进行传递)
  + Cookie 机制 (把所有需要保存的状态，通过 http head 进行传递。浏览器会自动处理)
- 基于 Cookie 的方式，进行频繁的数据传递，有若干缺点：
  + 不是那么安全
  + 传递数据量大的话，影响效率
  + Cookie 中保存的东西是基于字符串的，不是基于类型的
  + 浏览器本身对 Cookie 的大小是有限制的
- 在状态保证中，最核心的问题是区分各个请求。所以最重要保存、传递的数据是【身份凭证】。
  而其他跟这个【身份】相关的数据，都可以让服务器自行处理。
  这时，就出现了 Session 的概念。

** 请求方法

- GET
- POST
- PUT
- DELETE
- HEAD
- OPTION

** 响应码 (Status Code)

- 20X: 200, 201
- 30X: 301, 302, 304
- 40X: 403, 404
- 50X

常见响应码:
- 200, 正常返回
- 301/302, 永久重定向/临时重定向，结合响应头的 Location 进行页面的重定向
- 304, 内容未改动 (缓存机制)
- 403, Request Method not Found
- 404, Request Url Not Found

* HTTPS

在 HTTP 的基础上，对收发端的数据基于 TLS 或 SSL 协议进行加密、解密，
从而避免了在网络中数据明文传输导致的系列安全问题。

它本质还是 HTTP 协议，只不过更安全。

* HTTP2

对原来的 HTTP 协议进行的 *改进、升级* 版本，主要是提高性能:
- 对 1.x 协议语意的完全兼容，是升级不是重写
- 重点是对终端用户的感知延迟、网络及服务器资源的使用等性能的优化
  : 二进制分帧/多路复用/头部压缩/...

对于 HTTP2 大家的争议有很多。
它为了提升性能放弃了原来 HTTP1 的一些简洁性。
不过，主流的浏览器和服务器都对 HTTP2 进行了支持。
  
* Websocket
* AJAX
